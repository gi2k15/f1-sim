"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWorldChampions = void 0;
const axios_1 = __importDefault(require("axios"));
const cheerio = __importStar(require("cheerio"));
const endpoints_1 = require("../endpoints/endpoints");
const getWorldChampions = async () => {
    try {
        let worldChampions = [];
        const response = await (0, axios_1.default)(endpoints_1.staticLinks.hallOfFame);
        const $ = cheerio.load(response.data);
        $("div.grid:nth-child(2) > span").each(function () {
            const name = $(this).find("span:nth-child(2) > a > span").text().trim();
            const driver_image = $(this).find("span:nth-child(1) > span > img").attr("src");
            if (name.length !== 0 && driver_image?.length !== 0) {
                const worldChampion = {
                    name,
                    driver_image,
                };
                worldChampions.push(worldChampion);
            }
        });
        if (worldChampions.length === 0) {
            throw new Error(" No data found");
        }
        return worldChampions;
    }
    catch (error) {
        throw new Error(error);
    }
};
exports.getWorldChampions = getWorldChampions;
//# sourceMappingURL=world-champions.js.map